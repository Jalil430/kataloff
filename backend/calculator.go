package main

import (
	"errors"
	"math"
)

type CalcRequest struct {
	ProductName  string  `json:"productName"`
	Price        float64 `json:"price"`
	Term         int     `json:"term"`
	HasGuarantor bool    `json:"hasGuarantor"`
	HasDown      bool    `json:"hasDown"`
	DownPercent  float64 `json:"downPercent"`
}

type CalcResponse struct {
	EffectiveRate  float64 `json:"effectiveRate"`  // % –∑–∞ –≤–µ—Å—å —Å—Ä–æ–∫
	MonthlyPayment float64 `json:"monthlyPayment"` // –ø–ª–∞—Ç—ë–∂ –≤ –º–µ—Å—è—Ü
	Total          float64 `json:"total"`          // —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ
	TotalMarkup    float64 `json:"totalMarkup"`    // –æ–±—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
	DownPayment    float64 `json:"downPayment"`    // –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å
}

// ---------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ----------
func compute(req CalcRequest) (CalcResponse, error) {
	maxPrice, maxTerm, err := limits(req.HasGuarantor, req.HasDown)
	if err != nil {
		return CalcResponse{}, err
	}

	// –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
	if req.Price > maxPrice {
		return CalcResponse{}, errors.New("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞")
	}
	if req.Term > maxTerm {
		return CalcResponse{}, errors.New("–ü—Ä–µ–≤—ã—à–µ–Ω —Å—Ä–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏")
	}

	// üí∞ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
	baseRate := percentForTerm(req.Term, req.HasDown)

	// üíµ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å
	downPayment := 0.0
	if req.HasDown {
		if req.DownPercent > 0 {
			downPayment = req.Price * (req.DownPercent / 100)
		} else {
			downPayment = req.Price * 0.1
		}
	}

	// üí≥ –†–∞—Å—á—ë—Ç—ã
	financed := req.Price - downPayment
	total := financed * (1 + baseRate/100)
	monthly := total / float64(req.Term)
	totalMarkup := total - financed

	return CalcResponse{
		EffectiveRate:  baseRate,
		MonthlyPayment: math.Round(monthly),
		Total:          math.Round(total + downPayment),
		TotalMarkup:    math.Round(totalMarkup),
		DownPayment:    math.Round(downPayment),
	}, nil
}

// ---------- –õ–∏–º–∏—Ç—ã ----------
func limits(guarantor, down bool) (float64, int, error) {
	switch {
	case !guarantor:
		// –ë–µ–∑ –ø–æ—Ä—É—á–∏—Ç–µ–ª—è ‚Äî –º–∞–∫—Å–∏–º—É–º 70 000 ‚ÇΩ –∏ 8 –º–µ—Å
		return 70000, 8, nil

	case guarantor && !down:
		// –° –ø–æ—Ä—É—á–∏—Ç–µ–ª–µ–º, –±–µ–∑ –≤–∑–Ω–æ—Å–∞ ‚Äî –¥–æ 100 000 ‚ÇΩ –∏ 10 –º–µ—Å
		return 100000, 10, nil

	case guarantor && down:
		// –° –ø–æ—Ä—É—á–∏—Ç–µ–ª–µ–º –∏ –≤–∑–Ω–æ—Å–æ–º ‚Äî –¥–æ 150 000 ‚ÇΩ –∏ 10 –º–µ—Å
		return 150000, 10, nil

	default:
		return 0, 0, errors.New("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
	}
}

// ---------- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ ----------
func percentForTerm(term int, hasDown bool) float64 {
	if term < 3 {
		term = 3
	}
	if term > 10 {
		term = 10
	}

	withDown := map[int]float64{
		3: 15, 4: 18, 5: 21, 6: 25, 7: 29, 8: 33, 9: 37, 10: 41,
	}
	noDown := map[int]float64{
		3: 20, 4: 23, 5: 27, 6: 32, 7: 36, 8: 40,
	}

	if hasDown {
		return withDown[term]
	}
	return noDown[term]
}
