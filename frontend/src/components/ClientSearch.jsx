import React, { useState } from "react";

export default function ClientSearch() {
  const [fio, setFio] = useState("");
  const [clientId, setClientId] = useState("");
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [openIndex, setOpenIndex] = useState(null);

  const API_URL = "https://d5degr4sfnv9p7i065ga.kf69zffa.apigw.yandexcloud.net";
  const TOKEN =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMDNkYzljZTItM2U2Ni00MzAyLWE4YmMtOGY2YmY4YjM5MjlhIiwidHlwZSI6ImFjY2VzcyIsImV4cCI6MTc5MjEzNTgxNiwiY29tcGFueSI6IkthdGFsb2ZmIn0.gxSX9ZBV0yoc-cgV8zEmRywUdtpRVJLX07hq_R-P_XQ";

  const searchInstallments = async () => {
    setLoading(true);
    setError("");
    setData(null);

    try {
      const shortId = clientId.trim().substring(0, 8);
      const url = `${API_URL}/installments/search?client_id=${encodeURIComponent(
        shortId
      )}&client_name=${encodeURIComponent(fio)}`;

      const res = await fetch(url, {
        headers: {
          Authorization: `Bearer ${TOKEN}`,
          "Content-Type": "application/json",
        },
      });

      if (!res.ok)
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –§–ò–û)");

      const json = await res.json();
      if (!json || !json.installments || json.installments.length === 0)
        throw new Error("–†–∞—Å—Å—Ä–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");

      setData(json);
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e);
      setError(e.message);
    } finally {
      setLoading(false);
    }
  };

  const getStatusStyle = (status) => {
    const lower = status.toLowerCase();
    if (lower.includes("–æ–ø–ª–∞—á–µ–Ω")) return "bg-green-100 text-green-700";
    if (lower.includes("–ø—Ä–µ–¥—Å—Ç–æ—è—â")) return "bg-blue-100 text-blue-700";
    if (lower.includes("–ø—Ä–æ—Å—Ä–æ—á")) return "bg-red-100 text-red-700";
    if (lower.includes("—Å–µ–≥–æ–¥–Ω—è")) return "bg-orange-100 text-orange-700";
    return "bg-gray-100 text-gray-700";
  };

  const formatDate = (dateStr) => {
    if (!dateStr) return "‚Äî";
    const date = new Date(dateStr);
    return date.toLocaleDateString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };

  return (
    <div className="flex flex-col items-center justify-center py-12 px-6 min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 text-gray-900">
      <div className="bg-white/80 backdrop-blur-xl p-8 rounded-3xl shadow-2xl w-full max-w-6xl border border-gray-200">
        <h2 className="text-3xl font-extrabold text-center mb-8 text-green-700">
          üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ä–æ—á–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞
        </h2>

        {/* --- –ü–æ–ª—è –ø–æ–∏—Å–∫–∞ --- */}
        <div className="flex flex-col md:flex-row gap-4 mb-8">
          <input
            type="text"
            placeholder="–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
            value={fio}
            onChange={(e) => setFio(e.target.value)}
            className="flex-1 p-3 rounded-xl border border-gray-300 bg-white/60 backdrop-blur-md focus:ring-2 focus:ring-green-400 focus:outline-none"
          />
          <input
            type="text"
            placeholder="–ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ ID –∫–ª–∏–µ–Ω—Ç–∞"
            value={clientId}
            onChange={(e) => setClientId(e.target.value)}
            className="flex-1 p-3 rounded-xl border border-gray-300 bg-white/60 backdrop-blur-md focus:ring-2 focus:ring-green-400 focus:outline-none"
            maxLength={8}
          />
          <button
            onClick={searchInstallments}
            disabled={loading || !fio || !clientId}
            className={`px-6 py-3 rounded-xl font-semibold text-white shadow-lg transition-all duration-300 ${
              loading || !fio || !clientId
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-green-600 hover:bg-green-700 hover:shadow-green-300/50"
            }`}
          >
            {loading ? "–ü–æ–∏—Å–∫..." : "–ù–∞–π—Ç–∏"}
          </button>
        </div>

        {error && (
          <p className="text-red-500 text-center font-semibold">{error}</p>
        )}

        {/* --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã --- */}
        {data && (
          <div className="bg-white/80 backdrop-blur-lg text-gray-900 rounded-2xl p-6 shadow-inner mt-6 border border-gray-200">
            {/* –ò–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ */}
            <h3 className="text-2xl font-bold text-green-700 mb-4">
              üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
            </h3>
            <div className="grid md:grid-cols-2 gap-2 text-gray-700 mb-6">
              <p><b>–ò–º—è:</b> {data.client.name}</p>
              <p><b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> {data.client.short_id}</p>
              <p><b>–í—Å–µ–≥–æ —Ä–∞—Å—Å—Ä–æ—á–µ–∫:</b> {data.summary.total_installments}</p>
              <p><b>–û–ø–ª–∞—á–µ–Ω–æ:</b> {data.summary.total_paid} ‚ÇΩ</p>
              <p><b>–û—Å—Ç–∞—Ç–æ–∫:</b> {data.summary.total_remaining} ‚ÇΩ</p>
              <p><b>–ü—Ä–æ—Å—Ä–æ—á–µ–∫:</b> {data.summary.overdue_count}</p>
            </div>

            {/* --- –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–µ–∫ --- */}
            <h4 className="text-xl font-bold text-green-700 mb-4">
              üí∞ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–µ–∫
            </h4>

            <div className="space-y-4">
              {data.installments.map((inst, i) => (
                <div
                  key={i}
                  className="bg-white rounded-2xl border border-gray-200 shadow-sm overflow-hidden transition-all hover:shadow-lg"
                >
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ */}
                  <div
                    onClick={() => setOpenIndex(openIndex === i ? null : i)}
                    className="flex items-center justify-between px-5 py-4 cursor-pointer hover:bg-gray-50"
                  >
                    <div>
                      <div className="text-lg font-semibold text-green-700">
                        {inst.product_name}
                      </div>
                      <div className="text-sm text-gray-500">
                        –î–æ–≥–æ–≤–æ—Ä ‚Ññ {inst.installment_number} ‚Ä¢ {inst.term_months} –º–µ—Å.
                      </div>
                    </div>

                    <div className="flex items-center gap-6 text-sm">
                      <div>
                        <b>{inst.installment_price}</b> ‚ÇΩ
                      </div>
                      <div>
                        –û—Å—Ç–∞—Ç–æ–∫: <b>{inst.remaining_amount}</b> ‚ÇΩ
                      </div>
                      <span
                        className={`px-3 py-1 rounded-xl text-xs font-semibold ${getStatusStyle(
                          inst.payment_status
                        )}`}
                      >
                        {inst.payment_status}
                      </span>
                      <div className="text-gray-400 text-xl">
                        {openIndex === i ? "‚ñ¥" : "‚ñæ"}
                      </div>
                    </div>
                  </div>

                  {/* –í—ã–ø–∞–¥–∞—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
                  {openIndex === i && inst.payments && (
                    <div className="animate-fadeIn px-6 pb-4 bg-gray-50/50">
                      <table className="w-full mt-2 border-collapse text-sm">
                        <thead className="text-gray-700 border-b">
                          <tr className="bg-green-100">
                            <th className="p-2 text-left">‚Ññ</th>
                            <th className="p-2 text-left">–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã</th>
                            <th className="p-2 text-left">–°—É–º–º–∞</th>
                            <th className="p-2 text-left">–°—Ç–∞—Ç—É—Å</th>
                          </tr>
                        </thead>
                        <tbody>
                          {inst.payments.map((p, j) => {
                            const today = new Date().toISOString().split("T")[0];
                            let status = p.is_paid
                              ? "–û–ø–ª–∞—á–µ–Ω–æ"
                              : new Date(p.due_date) < new Date(today)
                              ? "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
                              : new Date(p.due_date).toDateString() ===
                                new Date(today).toDateString()
                              ? "–ö –æ–ø–ª–∞—Ç–µ —Å–µ–≥–æ–¥–Ω—è"
                              : "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π";
                            return (
                              <tr key={j} className="border-b hover:bg-gray-100">
                                <td className="p-2">{p.payment_number}</td>
                                <td className="p-2">{formatDate(p.due_date)}</td>
                                <td className="p-2">{p.expected_amount} ‚ÇΩ</td>
                                <td className="p-2">
                                  <span
                                    className={`px-3 py-1 rounded-xl text-xs font-semibold ${getStatusStyle(
                                      status
                                    )}`}
                                  >
                                    {status}
                                  </span>
                                </td>
                              </tr>
                            );
                          })}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
